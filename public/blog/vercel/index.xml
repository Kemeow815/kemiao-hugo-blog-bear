<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vercel on 喵落阁</title>
    <link>https://blog.kemiaosw.top/blog/vercel/</link>
    <description>Recent content in Vercel on 喵落阁</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2025, Ke Miao.</copyright>
    <lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.kemiaosw.top/blog/vercel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Waline评论在Vercel部署</title>
      <link>https://blog.kemiaosw.top/waline%E8%AF%84%E8%AE%BA%E5%9C%A8vercel%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.kemiaosw.top/waline%E8%AF%84%E8%AE%BA%E5%9C%A8vercel%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;使用Waline评论我喜欢使用的部署方法(个人认为最简便)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;所需账号&#34;&gt;所需账号&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一个Github账号&lt;/li&gt;&#xA;&lt;li&gt;一个Vercel账号&lt;/li&gt;&#xA;&lt;li&gt;一个leancloud账号(最好是国际服的，你有了Github难道还用大陆的吗？大陆的要备案，故在这里不阐述，末尾放原文链接)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;在-leancloud-里创建数据库&#34;&gt;在 leancloud 里创建数据库&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://console.leancloud.app/login&#34;&gt;登录&lt;/a&gt; 或 &lt;a href=&#34;https://console.leancloud.app/register&#34;&gt;注册&lt;/a&gt; &lt;code&gt;LeanCloud 国际版&lt;/code&gt; 并进入 &lt;a href=&#34;https://console.leancloud.app/apps&#34;&gt;控制台&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击左上角 &lt;a href=&#34;https://console.leancloud.app/apps&#34;&gt;创建应用&lt;/a&gt; 并起一个你喜欢的名字 (请选择免费的开发版):&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/14/7FOYbvS8MlQXe52.png&#34; alt=&#34;创建应用&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;进入应用，选择左下角的 &lt;code&gt;设置&lt;/code&gt; &amp;gt; &lt;code&gt;应用 Key&lt;/code&gt;。你可以看到你的 &lt;code&gt;APP ID&lt;/code&gt;,&lt;code&gt;APP Key&lt;/code&gt; 和 &lt;code&gt;Master Key&lt;/code&gt;。请记录它们，以便后续使用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/14/c1Vltvsm8GYXSbf.png&#34; alt=&#34;ID 和 Key&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;在-vercel-部署&#34;&gt;在 Vercel 部署&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fwalinejs%2Fwaline%2Ftree%2Fmain%2Fexample&#34;&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/kmfx/tuchuang@main/img/vercel.svg&#34; alt=&#34;Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击上方按钮，跳转至 Vercel 进行 Server 端部署。&lt;/p&gt;&#xA;&lt;p&gt;如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;输入一个你喜欢的 Vercel 项目名称并点击 &lt;code&gt;Create&lt;/code&gt; 继续:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/14/XauJLO7hfcWVx2Y.png&#34; alt=&#34;创建项目&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/14/Q7tExaML3XKlf12.png&#34; alt=&#34;deploy&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 &lt;code&gt;Go to Dashboard&lt;/code&gt; 可以跳转到应用的控制台。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/14/HqfvwV6GdrFROSZ.png&#34; alt=&#34;deploy&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击顶部的 &lt;code&gt;Settings&lt;/code&gt; - &lt;code&gt;Environment Variables&lt;/code&gt; 进入环境变量配置页，并配置三个环境变量 &lt;code&gt;LEAN_ID&lt;/code&gt;, &lt;code&gt;LEAN_KEY&lt;/code&gt; 和 &lt;code&gt;LEAN_MASTER_KEY&lt;/code&gt; 。它们的值分别对应上一步在 LeanCloud 中获得的 &lt;code&gt;APP ID&lt;/code&gt;, &lt;code&gt;APP KEY&lt;/code&gt;, &lt;code&gt;Master Key&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Umami博客访问统计Vercel&#43;Cloudflare Workers部署</title>
      <link>https://blog.kemiaosw.top/umami%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1vercel-cloudflare-workers%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.kemiaosw.top/umami%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1vercel-cloudflare-workers%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;h2 id=&#34;第一部分vercelumami&#34;&gt;第一部分：Vercel+Umami&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第一步&lt;br&gt;&#xA;1.1 &lt;kbd&gt;Fork&lt;/kbd&gt;​&lt;a href=&#34;https://github.com/umami-software/umami&#34;&gt;umami&lt;/a&gt;到自己的Github仓库&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/c4xDVNrsBpTM8YZ.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;1.2 创建项目&#xA;&lt;img src=&#34;https://s2.loli.net/2025/04/06/GX9OdivuxF5pJzH.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;第二步&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;　2.1 创建&lt;a href=&#34;https://vercel.com/login&#34;&gt;Vercel&lt;/a&gt;账号，这里我就省略了，因为GitHub可以直接进行授权即可。&lt;/p&gt;&#xA;&lt;p&gt;2.2 在你授权以后，首先创建&lt;kbd&gt;Postgres&lt;/kbd&gt;数据库，直接一路下一步，创建好就行，可以给下面的连接复制出来&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/K69FpfmjZxcu3Ad.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/7OieEKGht4kgSux.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;　　点击&lt;kbd&gt;Copy Snippet&lt;/kbd&gt;​,就可以，记住在粘贴的时候是我画线里面的部分，双引号都不需要 ，因为要设置环境变量。&lt;/p&gt;&#xA;&lt;p&gt;　　&#x9;2.3 在创建好数据库以后，回到主页面的&lt;kbd&gt;Overview&lt;/kbd&gt;​，然后右上角有一个&lt;kbd&gt;Add New&lt;/kbd&gt;​选择添加&lt;kbd&gt;Project&lt;/kbd&gt;​，选择你&lt;kbd&gt;Fork&lt;/kbd&gt;​的&lt;kbd&gt;umami&lt;/kbd&gt;​，添加即可。&#xA;2.4 设置环境变量，&lt;code&gt;DATABASE_URL&lt;/code&gt;​和&lt;code&gt;HASH_SALT&lt;/code&gt;​和&lt;code&gt;TRACKER_SCRIPT_NAME&lt;/code&gt;​，其中&lt;code&gt;DATABASE_URL&lt;/code&gt;​的值就是上面划线的部分，其他的两个环境变量都是对应的值是String自己可以随意定义。&#xA;　　&#x9;2.5 设置好以后点击&lt;kbd&gt;Deploy&lt;/kbd&gt;​，等待大约两分钟左右，自动部署完成，部署完成以后可以通过下图种面板上面给的链接可以直接访问。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/ahX2wHLrfYAD7ZW.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;　　&#x9;2.6 打开以后会跳出登录地址，默认的登录密码是&lt;kbd&gt;adminumami&lt;/kbd&gt;​，登录进去以后，设置给自己密码修改了，然后就是设置里面添加网站，给你要统计的网站添加进去，到此，别人访问你的网站你可以通过面板看到统计数据了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第二部分umamicloudflare-worker这一部分主要是让你的博客上面能展示的访问数据效果如下&#34;&gt;第二部分：Umami+Cloudflare worker这一部分主要是让你的博客上面能展示的访问数据，效果如下：&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/fR71aFG4oMD29Pz.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;注册&lt;kbd&gt;CloudFlare&lt;/kbd&gt;​账号，然后进去以后，选择&lt;kbd&gt;Workers&lt;/kbd&gt;​和&lt;kbd&gt;Pages&lt;/kbd&gt;​，点击&lt;kbd&gt;创建&lt;/kbd&gt;​，再点击&lt;kbd&gt;部署&lt;/kbd&gt;​&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/CYojqdGHkiuFepQ.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/06/6B2rXxk4Uu71GQC.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;　　部署以后，进去点击编辑代码，将里面的代码进行替换：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; {&#xD;&#xA;  event.respondWith(handleRequest(event));&#xD;&#xA;});&#xD;&#xA;&#xD;&#xA;const API_BASE_URL = &amp;#39;https://umami.yourdomain.com&amp;#39;;  // 替换你的刚才部署的umami的域名&#xD;&#xA;const TOKEN = &amp;#39;your_token&amp;#39;; // 获取的token&#xD;&#xA;const WEBSITE_ID = &amp;#39;your_website_id&amp;#39;; // 在umami添加网站的 webstie id&#xD;&#xA;const CACHE_KEY = &amp;#39;umami_cache&amp;#39;;&#xD;&#xA;const CACHE_TIME = 600; // Cache time in seconds&#xD;&#xA;&#xD;&#xA;async function fetchUmamiData(startAt, endAt) {&#xD;&#xA;  const url = `${API_BASE_URL}/api/websites/${WEBSITE_ID}/stats?startAt=${startAt}&amp;amp;endAt=${endAt}`;&#xD;&#xA;  const response = await fetch(url, {&#xD;&#xA;    headers: {&#xD;&#xA;      &amp;#39;Authorization&amp;#39;: `Bearer ${TOKEN}`,&#xD;&#xA;      &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;&#xD;&#xA;    }&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  if (!response.ok) {&#xD;&#xA;    console.error(`Error fetching data: ${response.statusText}`);&#xD;&#xA;    return null;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  return response.json();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function handleRequest(event) {&#xD;&#xA;  const cache = await caches.open(CACHE_KEY);&#xD;&#xA;  const cachedResponse = await cache.match(event.request);&#xD;&#xA;&#xD;&#xA;  if (cachedResponse) {&#xD;&#xA;    return cachedResponse;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  const now = Date.now();&#xD;&#xA;  const todayStart = new Date(now).setHours(0, 0, 0, 0);&#xD;&#xA;  const yesterdayStart = new Date(now - 86400000).setHours(0, 0, 0, 0);&#xD;&#xA;  const lastMonthStart = new Date(now).setMonth(new Date(now).getMonth() - 1);&#xD;&#xA;  const lastYearStart = new Date(now).setFullYear(new Date(now).getFullYear() - 1);&#xD;&#xA;&#xD;&#xA;  const [todayData, yesterdayData, lastMonthData, lastYearData] = await Promise.all([&#xD;&#xA;    fetchUmamiData(todayStart, now),&#xD;&#xA;    fetchUmamiData(yesterdayStart, todayStart),&#xD;&#xA;    fetchUmamiData(lastMonthStart, now),&#xD;&#xA;    fetchUmamiData(lastYearStart, now)&#xD;&#xA;  ]);&#xD;&#xA;&#xD;&#xA;  const responseData = {&#xD;&#xA;    today_uv: todayData?.visitors?.value ?? null,&#xD;&#xA;    today_pv: todayData?.pageviews?.value ?? null,&#xD;&#xA;    yesterday_uv: yesterdayData?.visitors?.value ?? null,&#xD;&#xA;    yesterday_pv: yesterdayData?.pageviews?.value ?? null,&#xD;&#xA;    last_month_pv: lastMonthData?.pageviews?.value ?? null,&#xD;&#xA;    last_year_pv: lastYearData?.pageviews?.value ?? null&#xD;&#xA;  };&#xD;&#xA;&#xD;&#xA;  const jsonResponse = new Response(JSON.stringify(responseData), {&#xD;&#xA;    headers: {&#xD;&#xA;      &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;,&#xD;&#xA;      &amp;#39;Access-Control-Allow-Origin&amp;#39;: &amp;#39;*&amp;#39;,&#xD;&#xA;      &amp;#39;Access-Control-Allow-Methods&amp;#39;: &amp;#39;GET, POST, PUT, DELETE, OPTIONS&amp;#39;,&#xD;&#xA;      &amp;#39;Access-Control-Allow-Headers&amp;#39;: &amp;#39;Content-Type, Authorization&amp;#39;&#xD;&#xA;    }&#xD;&#xA;  });&#xD;&#xA;&#xD;&#xA;  event.waitUntil(cache.put(event.request, jsonResponse.clone()));&#xD;&#xA;&#xD;&#xA;  return jsonResponse;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　但是里面有几个比较重要的参数需要修改&lt;code&gt;API_BASE_URL&lt;/code&gt;​、&lt;code&gt;TOKEN&lt;/code&gt;​、&lt;code&gt;WEBSITE_ID&lt;/code&gt;​其中&lt;code&gt;API_BASE_URL&lt;/code&gt;​和&lt;code&gt;WEBSITE_ID&lt;/code&gt;​已经是有的，&lt;code&gt;WEBSITE_ID&lt;/code&gt;​在&lt;kbd&gt;umami&lt;/kbd&gt;​中的设置，选择你已经添加好的网站，点击&lt;kbd&gt;编辑&lt;/kbd&gt;​，会出现网站的&lt;code&gt;WEBSITE_ID&lt;/code&gt;​：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
